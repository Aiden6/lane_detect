node {
  name: "input_tensor"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "binary_input_label"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "instance_input_label"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
}
node {
  name: "net_phase"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train"
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "test"
      }
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "net_phase"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.31031644344329834
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W"
  input: "lanenet_loss/inference/encode/conv1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/conv1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/Conv2D"
  op: "Conv2D"
  input: "input_tensor"
  input: "lanenet_loss/inference/encode/conv1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/conv1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/conv1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/conv1/conv1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/conv1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/conv1/conv1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/conv1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/conv1/conv1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.329140305519104
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_1_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.285043865442276
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/conv/conv"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  op: "AvgPool"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/conv/conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.329140305519104
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_2_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.285043865442276
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/conv/conv"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  op: "AvgPool"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/conv/conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.329140305519104
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_3_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.285043865442276
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/conv/conv"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  op: "AvgPool"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/conv/conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.329140305519104
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_4_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.285043865442276
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/conv/conv"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  op: "AvgPool"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/conv/conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\030\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.329140305519104
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2"
  op: "Relu"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.19002923369407654
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/conv_2"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
  op: "ConcatV2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/conv_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Switch"
  op: "Switch"
  input: "Equal"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_f"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  op: "Identity"
  input: "Equal"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const_1"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const_2"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_1:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/decay"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_t"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/sub/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/sub/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/sub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1"
  op: "AssignSub"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1/Switch"
  op: "RefSwitch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Identity"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/AssignMovingAvg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/Const"
  op: "Const"
  input: "^lanenet_loss/inference/encode/Dense_Block_5_1/cond/switch_f"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_1"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge"
  op: "Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Identity"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.285043865442276
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/conv/conv"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5_1/avgpool"
  op: "AvgPool"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/conv/conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W"
  input: "lanenet_loss/inference/decode/score_origin/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_origin/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/avgpool"
  input: "lanenet_loss/inference/decode/score_origin/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/score_origin"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_origin/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.050389111042022705
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\010\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/Shape"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/Shape"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/Shape"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul_1"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice_2"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/stack"
  op: "Pack"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/strided_slice"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/mul_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/stack"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/read"
  input: "lanenet_loss/inference/decode/score_origin/score_origin"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W"
  input: "lanenet_loss/inference/decode/score_1/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_1/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/decode/score_1/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/score_1"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_1/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/fuse_1"
  op: "Add"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose"
  input: "lanenet_loss/inference/decode/score_1/score_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.050389111042022705
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/Shape"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/Shape"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/Shape"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul_1"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice_2"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/stack"
  op: "Pack"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/strided_slice"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/mul_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/stack"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/read"
  input: "lanenet_loss/inference/decode/fuse_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40311288833618164
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W"
  input: "lanenet_loss/inference/decode/score_2/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_2/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/decode/score_2/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/score_2"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_2/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/fuse_2"
  op: "Add"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose"
  input: "lanenet_loss/inference/decode/score_2/score_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.012597277760505676
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/Shape"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/Shape"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2"
  op: "StridedSlice"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/Shape"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul_1"
  op: "Mul"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice_2"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/stack/3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/stack"
  op: "Pack"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/strided_slice"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/mul_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/stack"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/read"
  input: "lanenet_loss/inference/decode/fuse_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 8
        i: 8
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20155644416809082
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W"
  input: "lanenet_loss/inference/decode/score_final/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_final/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "lanenet_loss/inference/decode/score_final/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/score_final"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_final/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/Reshape"
  op: "Reshape"
  input: "lanenet_loss/inference/decode/score_final/score_final"
  input: "lanenet_loss/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/Squeeze"
  op: "Squeeze"
  input: "binary_input_label"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/Reshape_1"
  op: "Reshape"
  input: "lanenet_loss/Squeeze"
  input: "lanenet_loss/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/one_hot/on_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/one_hot/off_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/one_hot/depth"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lanenet_loss/one_hot"
  op: "OneHot"
  input: "lanenet_loss/Reshape_1"
  input: "lanenet_loss/one_hot/depth"
  input: "lanenet_loss/one_hot/on_value"
  input: "lanenet_loss/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/labels_stop_gradient"
  op: "StopGradient"
  input: "lanenet_loss/one_hot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub"
  op: "Sub"
  input: "lanenet_loss/entropy_loss/Rank_1"
  input: "lanenet_loss/entropy_loss/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice/begin"
  op: "Pack"
  input: "lanenet_loss/entropy_loss/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice"
  op: "Slice"
  input: "lanenet_loss/entropy_loss/Shape_1"
  input: "lanenet_loss/entropy_loss/Slice/begin"
  input: "lanenet_loss/entropy_loss/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat"
  op: "ConcatV2"
  input: "lanenet_loss/entropy_loss/concat/values_0"
  input: "lanenet_loss/entropy_loss/Slice"
  input: "lanenet_loss/entropy_loss/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Reshape"
  op: "Reshape"
  input: "lanenet_loss/Reshape"
  input: "lanenet_loss/entropy_loss/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub_1"
  op: "Sub"
  input: "lanenet_loss/entropy_loss/Rank_2"
  input: "lanenet_loss/entropy_loss/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_1/begin"
  op: "Pack"
  input: "lanenet_loss/entropy_loss/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_1"
  op: "Slice"
  input: "lanenet_loss/entropy_loss/Shape_2"
  input: "lanenet_loss/entropy_loss/Slice_1/begin"
  input: "lanenet_loss/entropy_loss/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/concat_1"
  op: "ConcatV2"
  input: "lanenet_loss/entropy_loss/concat_1/values_0"
  input: "lanenet_loss/entropy_loss/Slice_1"
  input: "lanenet_loss/entropy_loss/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Reshape_1"
  op: "Reshape"
  input: "lanenet_loss/entropy_loss/labels_stop_gradient"
  input: "lanenet_loss/entropy_loss/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "lanenet_loss/entropy_loss/Reshape"
  input: "lanenet_loss/entropy_loss/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Sub_2"
  op: "Sub"
  input: "lanenet_loss/entropy_loss/Rank"
  input: "lanenet_loss/entropy_loss/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_2/size"
  op: "Pack"
  input: "lanenet_loss/entropy_loss/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Slice_2"
  op: "Slice"
  input: "lanenet_loss/entropy_loss/Shape"
  input: "lanenet_loss/entropy_loss/Slice_2/begin"
  input: "lanenet_loss/entropy_loss/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/entropy_loss/Reshape_2"
  op: "Reshape"
  input: "lanenet_loss/entropy_loss"
  input: "lanenet_loss/entropy_loss/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/Mean"
  op: "Mean"
  input: "lanenet_loss/entropy_loss/Reshape_2"
  input: "lanenet_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000@\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20155644416809082
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/TruncatedNormal"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal"
  op: "Add"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/mul"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Assign"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W"
  input: "lanenet_loss/pix_embedding_conv/W/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/read"
  op: "Identity"
  input: "lanenet_loss/pix_embedding_conv/W"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/Conv2D"
  op: "Conv2D"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "lanenet_loss/pix_embedding_conv/W/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/pix_embedding_conv"
  op: "Identity"
  input: "lanenet_loss/pix_embedding_conv/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_relu"
  op: "Relu"
  input: "lanenet_loss/pix_embedding_conv/pix_embedding_conv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArray"
  op: "TensorArrayV3"
  input: "lanenet_loss/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_1"
  op: "TensorArrayV3"
  input: "lanenet_loss/TensorArray_1/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_2/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_2"
  op: "TensorArrayV3"
  input: "lanenet_loss/TensorArray_2/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_3/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArray_3"
  op: "TensorArrayV3"
  input: "lanenet_loss/TensorArray_3/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: true
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/while/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Enter"
  op: "Enter"
  input: "instance_input_label"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_1"
  op: "Enter"
  input: "lanenet_loss/pix_embedding_relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_2"
  op: "Enter"
  input: "lanenet_loss/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_3"
  op: "Enter"
  input: "lanenet_loss/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_4"
  op: "Enter"
  input: "lanenet_loss/TensorArray_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_5"
  op: "Enter"
  input: "lanenet_loss/TensorArray_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Enter_6"
  op: "Enter"
  input: "lanenet_loss/while/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Merge"
  op: "Merge"
  input: "lanenet_loss/while/Enter"
  input: "lanenet_loss/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_1"
  op: "Merge"
  input: "lanenet_loss/while/Enter_1"
  input: "lanenet_loss/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_2"
  op: "Merge"
  input: "lanenet_loss/while/Enter_2"
  input: "lanenet_loss/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_3"
  op: "Merge"
  input: "lanenet_loss/while/Enter_3"
  input: "lanenet_loss/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_4"
  op: "Merge"
  input: "lanenet_loss/while/Enter_4"
  input: "lanenet_loss/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_5"
  op: "Merge"
  input: "lanenet_loss/while/Enter_5"
  input: "lanenet_loss/while/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Merge_6"
  op: "Merge"
  input: "lanenet_loss/while/Enter_6"
  input: "lanenet_loss/while/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Shape"
  op: "Const"
  input: "^lanenet_loss/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice/stack"
  op: "Const"
  input: "^lanenet_loss/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice/stack_1"
  op: "Const"
  input: "^lanenet_loss/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice"
  op: "StridedSlice"
  input: "lanenet_loss/while/Shape"
  input: "lanenet_loss/while/strided_slice/stack"
  input: "lanenet_loss/while/strided_slice/stack_1"
  input: "lanenet_loss/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/while/Less"
  op: "Less"
  input: "lanenet_loss/while/Merge_6"
  input: "lanenet_loss/while/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/LoopCond"
  op: "LoopCond"
  input: "lanenet_loss/while/Less"
}
node {
  name: "lanenet_loss/while/Switch"
  op: "Switch"
  input: "lanenet_loss/while/Merge"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_1"
  op: "Switch"
  input: "lanenet_loss/while/Merge_1"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_2"
  op: "Switch"
  input: "lanenet_loss/while/Merge_2"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_2"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_3"
  op: "Switch"
  input: "lanenet_loss/while/Merge_3"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_3"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_4"
  op: "Switch"
  input: "lanenet_loss/while/Merge_4"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_4"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_5"
  op: "Switch"
  input: "lanenet_loss/while/Merge_5"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_5"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Switch_6"
  op: "Switch"
  input: "lanenet_loss/while/Merge_6"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Merge_6"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Identity"
  op: "Identity"
  input: "lanenet_loss/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_1"
  op: "Identity"
  input: "lanenet_loss/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_2"
  op: "Identity"
  input: "lanenet_loss/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_3"
  op: "Identity"
  input: "lanenet_loss/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_4"
  op: "Identity"
  input: "lanenet_loss/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_5"
  op: "Identity"
  input: "lanenet_loss/while/Switch_5:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Identity_6"
  op: "Identity"
  input: "lanenet_loss/while/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/add/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/add"
  op: "Add"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_1/stack"
  op: "Pack"
  input: "lanenet_loss/while/Identity_6"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_1/stack_1"
  op: "Pack"
  input: "lanenet_loss/while/add"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_1/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_1"
  op: "StridedSlice"
  input: "lanenet_loss/while/strided_slice_1/Enter"
  input: "lanenet_loss/while/strided_slice_1/stack"
  input: "lanenet_loss/while/strided_slice_1/stack_1"
  input: "lanenet_loss/while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_1/Enter"
  op: "Enter"
  input: "lanenet_loss/pix_embedding_relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/add_1/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/add_1"
  op: "Add"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_2/stack"
  op: "Pack"
  input: "lanenet_loss/while/Identity_6"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_2/stack_1"
  op: "Pack"
  input: "lanenet_loss/while/add_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_2/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_2"
  op: "StridedSlice"
  input: "lanenet_loss/while/strided_slice_2/Enter"
  input: "lanenet_loss/while/strided_slice_2/stack"
  input: "lanenet_loss/while/strided_slice_2/stack_1"
  input: "lanenet_loss/while/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lanenet_loss/while/strided_slice_2/Enter"
  op: "Enter"
  input: "instance_input_label"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape/shape"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape"
  op: "Reshape"
  input: "lanenet_loss/while/strided_slice_2"
  input: "lanenet_loss/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_1/shape"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_1"
  op: "Reshape"
  input: "lanenet_loss/while/strided_slice_1"
  input: "lanenet_loss/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/UniqueWithCounts"
  op: "UniqueWithCounts"
  input: "lanenet_loss/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_idx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Cast"
  op: "Cast"
  input: "lanenet_loss/while/UniqueWithCounts:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Size"
  op: "Size"
  input: "lanenet_loss/while/UniqueWithCounts"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/UnsortedSegmentSum"
  op: "UnsortedSegmentSum"
  input: "lanenet_loss/while/Reshape_1"
  input: "lanenet_loss/while/UniqueWithCounts:1"
  input: "lanenet_loss/while/Size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_2/shape"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_2"
  op: "Reshape"
  input: "lanenet_loss/while/Cast"
  input: "lanenet_loss/while/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/div"
  op: "RealDiv"
  input: "lanenet_loss/while/UnsortedSegmentSum"
  input: "lanenet_loss/while/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/GatherV2/axis"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/GatherV2"
  op: "GatherV2"
  input: "lanenet_loss/while/div"
  input: "lanenet_loss/while/UniqueWithCounts:1"
  input: "lanenet_loss/while/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Sub"
  op: "Sub"
  input: "lanenet_loss/while/GatherV2"
  input: "lanenet_loss/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm/mul"
  op: "Mul"
  input: "lanenet_loss/while/Sub"
  input: "lanenet_loss/while/Sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm/Sum/reduction_indices"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/norm/Sum"
  op: "Sum"
  input: "lanenet_loss/while/norm/mul"
  input: "lanenet_loss/while/norm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/while/norm/Sqrt"
  op: "Sqrt"
  input: "lanenet_loss/while/norm/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm/Squeeze"
  op: "Squeeze"
  input: "lanenet_loss/while/norm/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sub_1/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sub_1"
  op: "Sub"
  input: "lanenet_loss/while/norm/Squeeze"
  input: "lanenet_loss/while/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lanenet_loss/while/Sub_1"
  input: "lanenet_loss/while/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value"
  op: "Maximum"
  input: "lanenet_loss/while/clip_by_value/Minimum"
  input: "lanenet_loss/while/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Square"
  op: "Square"
  input: "lanenet_loss/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/UnsortedSegmentSum_1"
  op: "UnsortedSegmentSum"
  input: "lanenet_loss/while/Square"
  input: "lanenet_loss/while/UniqueWithCounts:1"
  input: "lanenet_loss/while/Size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/div_1"
  op: "RealDiv"
  input: "lanenet_loss/while/UnsortedSegmentSum_1"
  input: "lanenet_loss/while/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Const_1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sum"
  op: "Sum"
  input: "lanenet_loss/while/div_1"
  input: "lanenet_loss/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/while/Cast_1"
  op: "Cast"
  input: "lanenet_loss/while/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/truediv"
  op: "RealDiv"
  input: "lanenet_loss/while/Sum"
  input: "lanenet_loss/while/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Tile/multiples/1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Tile/multiples"
  op: "Pack"
  input: "lanenet_loss/while/Size"
  input: "lanenet_loss/while/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/Tile"
  op: "Tile"
  input: "lanenet_loss/while/div"
  input: "lanenet_loss/while/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Tile_1/multiples/0"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Tile_1/multiples"
  op: "Pack"
  input: "lanenet_loss/while/Tile_1/multiples/0"
  input: "lanenet_loss/while/Size"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/Tile_1"
  op: "Tile"
  input: "lanenet_loss/while/div"
  input: "lanenet_loss/while/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/mul"
  op: "Mul"
  input: "lanenet_loss/while/Size"
  input: "lanenet_loss/while/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_3/shape/1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_3/shape"
  op: "Pack"
  input: "lanenet_loss/while/mul"
  input: "lanenet_loss/while/Reshape_3/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/Reshape_3"
  op: "Reshape"
  input: "lanenet_loss/while/Tile_1"
  input: "lanenet_loss/while/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Sub_2"
  op: "Sub"
  input: "lanenet_loss/while/Reshape_3"
  input: "lanenet_loss/while/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Abs"
  op: "Abs"
  input: "lanenet_loss/while/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Sum_1/reduction_indices"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sum_1"
  op: "Sum"
  input: "lanenet_loss/while/Abs"
  input: "lanenet_loss/while/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/while/zeros/shape_as_tensor"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/zeros/Const"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/zeros"
  op: "Fill"
  input: "lanenet_loss/while/zeros/shape_as_tensor"
  input: "lanenet_loss/while/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/NotEqual"
  op: "NotEqual"
  input: "lanenet_loss/while/Sum_1"
  input: "lanenet_loss/while/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice/stack"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice/stack_1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "lanenet_loss/while/boolean_mask/Shape"
  input: "lanenet_loss/while/boolean_mask/strided_slice/stack"
  input: "lanenet_loss/while/boolean_mask/strided_slice/stack_1"
  input: "lanenet_loss/while/boolean_mask/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Prod/reduction_indices"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Prod"
  op: "Prod"
  input: "lanenet_loss/while/boolean_mask/strided_slice"
  input: "lanenet_loss/while/boolean_mask/Prod/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_1/stack"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "lanenet_loss/while/boolean_mask/Shape_1"
  input: "lanenet_loss/while/boolean_mask/strided_slice_1/stack"
  input: "lanenet_loss/while/boolean_mask/strided_slice_1/stack_1"
  input: "lanenet_loss/while/boolean_mask/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Shape_2"
  op: "Shape"
  input: "lanenet_loss/while/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_2/stack"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "lanenet_loss/while/boolean_mask/Shape_2"
  input: "lanenet_loss/while/boolean_mask/strided_slice_2/stack"
  input: "lanenet_loss/while/boolean_mask/strided_slice_2/stack_1"
  input: "lanenet_loss/while/boolean_mask/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/concat/values_1"
  op: "Pack"
  input: "lanenet_loss/while/boolean_mask/Prod"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/concat/axis"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/concat"
  op: "ConcatV2"
  input: "lanenet_loss/while/boolean_mask/strided_slice_1"
  input: "lanenet_loss/while/boolean_mask/concat/values_1"
  input: "lanenet_loss/while/boolean_mask/strided_slice_2"
  input: "lanenet_loss/while/boolean_mask/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Reshape"
  op: "Reshape"
  input: "lanenet_loss/while/Sub_2"
  input: "lanenet_loss/while/boolean_mask/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Reshape_1/shape"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "lanenet_loss/while/NotEqual"
  input: "lanenet_loss/while/boolean_mask/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Where"
  op: "Where"
  input: "lanenet_loss/while/boolean_mask/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "lanenet_loss/while/boolean_mask/Where"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/GatherV2/axis"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "lanenet_loss/while/boolean_mask/Reshape"
  input: "lanenet_loss/while/boolean_mask/Squeeze"
  input: "lanenet_loss/while/boolean_mask/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm_1/mul"
  op: "Mul"
  input: "lanenet_loss/while/boolean_mask/GatherV2"
  input: "lanenet_loss/while/boolean_mask/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm_1/Sum/reduction_indices"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/norm_1/Sum"
  op: "Sum"
  input: "lanenet_loss/while/norm_1/mul"
  input: "lanenet_loss/while/norm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/while/norm_1/Sqrt"
  op: "Sqrt"
  input: "lanenet_loss/while/norm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm_1/Squeeze"
  op: "Squeeze"
  input: "lanenet_loss/while/norm_1/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sub_3/x"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Sub_3"
  op: "Sub"
  input: "lanenet_loss/while/Sub_3/x"
  input: "lanenet_loss/while/norm_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lanenet_loss/while/Sub_3"
  input: "lanenet_loss/while/Sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value_1/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/clip_by_value_1"
  op: "Maximum"
  input: "lanenet_loss/while/clip_by_value_1/Minimum"
  input: "lanenet_loss/while/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Square_1"
  op: "Square"
  input: "lanenet_loss/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Const_2"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Mean"
  op: "Mean"
  input: "lanenet_loss/while/Square_1"
  input: "lanenet_loss/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/while/norm_2/mul"
  op: "Mul"
  input: "lanenet_loss/while/div"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm_2/Sum/reduction_indices"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/norm_2/Sum"
  op: "Sum"
  input: "lanenet_loss/while/norm_2/mul"
  input: "lanenet_loss/while/norm_2/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/while/norm_2/Sqrt"
  op: "Sqrt"
  input: "lanenet_loss/while/norm_2/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/norm_2/Squeeze"
  op: "Squeeze"
  input: "lanenet_loss/while/norm_2/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Const_3"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/Mean_1"
  op: "Mean"
  input: "lanenet_loss/while/norm_2/Squeeze"
  input: "lanenet_loss/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/while/mul_1/x"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/mul_1"
  op: "Mul"
  input: "lanenet_loss/while/mul_1/x"
  input: "lanenet_loss/while/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/mul_2/x"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/mul_2"
  op: "Mul"
  input: "lanenet_loss/while/mul_2/x"
  input: "lanenet_loss/while/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/mul_3/x"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lanenet_loss/while/mul_3"
  op: "Mul"
  input: "lanenet_loss/while/mul_3/x"
  input: "lanenet_loss/while/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/add_2"
  op: "Add"
  input: "lanenet_loss/while/mul_1"
  input: "lanenet_loss/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/add_3"
  op: "Add"
  input: "lanenet_loss/while/add_2"
  input: "lanenet_loss/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/mul_4/x"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lanenet_loss/while/mul_4"
  op: "Mul"
  input: "lanenet_loss/while/mul_4/x"
  input: "lanenet_loss/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/mul_4"
  input: "lanenet_loss/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_4"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lanenet_loss/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lanenet_loss/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/mul_1"
  input: "lanenet_loss/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lanenet_loss/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_2/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lanenet_loss/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/mul_2"
  input: "lanenet_loss/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_2"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_2/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lanenet_loss/TensorArray_2"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_3/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lanenet_loss/while/TensorArrayWrite_3/TensorArrayWriteV3/Enter"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/mul_3"
  input: "lanenet_loss/while/Identity_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_3"
      }
    }
  }
}
node {
  name: "lanenet_loss/while/TensorArrayWrite_3/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lanenet_loss/TensorArray_3"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "lanenet_loss/while/add_4/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/while/add_4"
  op: "Add"
  input: "lanenet_loss/while/Identity_6"
  input: "lanenet_loss/while/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration"
  op: "NextIteration"
  input: "lanenet_loss/while/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_1"
  op: "NextIteration"
  input: "lanenet_loss/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_2"
  op: "NextIteration"
  input: "lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_3"
  op: "NextIteration"
  input: "lanenet_loss/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_4"
  op: "NextIteration"
  input: "lanenet_loss/while/TensorArrayWrite_2/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_5"
  op: "NextIteration"
  input: "lanenet_loss/while/TensorArrayWrite_3/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/NextIteration_6"
  op: "NextIteration"
  input: "lanenet_loss/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/while/Exit"
  op: "Exit"
  input: "lanenet_loss/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_1"
  op: "Exit"
  input: "lanenet_loss/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_2"
  op: "Exit"
  input: "lanenet_loss/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_3"
  op: "Exit"
  input: "lanenet_loss/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_4"
  op: "Exit"
  input: "lanenet_loss/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_5"
  op: "Exit"
  input: "lanenet_loss/while/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/while/Exit_6"
  op: "Exit"
  input: "lanenet_loss/while/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lanenet_loss/TensorArray"
  input: "lanenet_loss/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack/range"
  op: "Range"
  input: "lanenet_loss/TensorArrayStack/range/start"
  input: "lanenet_loss/TensorArrayStack/TensorArraySizeV3"
  input: "lanenet_loss/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lanenet_loss/TensorArray"
  input: "lanenet_loss/TensorArrayStack/range"
  input: "lanenet_loss/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_1/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lanenet_loss/TensorArray_1"
  input: "lanenet_loss/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_1/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_1/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_1/range"
  op: "Range"
  input: "lanenet_loss/TensorArrayStack_1/range/start"
  input: "lanenet_loss/TensorArrayStack_1/TensorArraySizeV3"
  input: "lanenet_loss/TensorArrayStack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_1"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_1/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lanenet_loss/TensorArray_1"
  input: "lanenet_loss/TensorArrayStack_1/range"
  input: "lanenet_loss/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_2/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lanenet_loss/TensorArray_2"
  input: "lanenet_loss/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_2"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_2/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_2/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_2/range"
  op: "Range"
  input: "lanenet_loss/TensorArrayStack_2/range/start"
  input: "lanenet_loss/TensorArrayStack_2/TensorArraySizeV3"
  input: "lanenet_loss/TensorArrayStack_2/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_2"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_2/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lanenet_loss/TensorArray_2"
  input: "lanenet_loss/TensorArrayStack_2/range"
  input: "lanenet_loss/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_3/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lanenet_loss/TensorArray_3"
  input: "lanenet_loss/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_3"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_3/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_3/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_3/range"
  op: "Range"
  input: "lanenet_loss/TensorArrayStack_3/range/start"
  input: "lanenet_loss/TensorArrayStack_3/TensorArraySizeV3"
  input: "lanenet_loss/TensorArrayStack_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_3"
      }
    }
  }
}
node {
  name: "lanenet_loss/TensorArrayStack_3/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lanenet_loss/TensorArray_3"
  input: "lanenet_loss/TensorArrayStack_3/range"
  input: "lanenet_loss/while/Exit_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "lanenet_loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/Mean_1"
  op: "Mean"
  input: "lanenet_loss/TensorArrayStack/TensorArrayGatherV3"
  input: "lanenet_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/Mean_2"
  op: "Mean"
  input: "lanenet_loss/TensorArrayStack_1/TensorArrayGatherV3"
  input: "lanenet_loss/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/Mean_3"
  op: "Mean"
  input: "lanenet_loss/TensorArrayStack_2/TensorArrayGatherV3"
  input: "lanenet_loss/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lanenet_loss/Mean_4"
  op: "Mean"
  input: "lanenet_loss/TensorArrayStack_3/TensorArrayGatherV3"
  input: "lanenet_loss/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lanenet_loss/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.699999988079071
      }
    }
  }
}
node {
  name: "lanenet_loss/mul"
  op: "Mul"
  input: "lanenet_loss/mul/x"
  input: "lanenet_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.30000001192092896
      }
    }
  }
}
node {
  name: "lanenet_loss/mul_1"
  op: "Mul"
  input: "lanenet_loss/mul_1/x"
  input: "lanenet_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lanenet_loss/add"
  op: "Add"
  input: "lanenet_loss/mul"
  input: "lanenet_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub"
  op: "Sub"
  input: "Rank"
  input: "Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Slice/begin"
  op: "Pack"
  input: "Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "Shape_1"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "concat/values_0"
  input: "Slice"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "lanenet_loss/inference/decode/score_final/score_final"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Softmax"
  op: "Softmax"
  input: "Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "Softmax"
  input: "Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "Reshape_1"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "Reshape_1"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "ArgMax_1"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Equal_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "Equal_1"
  op: "Equal"
  input: "binary_input_label"
  input: "Equal_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Where"
  op: "Where"
  input: "Equal_1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "GatherNd"
  op: "GatherNd"
  input: "ExpandDims"
  input: "Where"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "count_nonzero/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count_nonzero/NotEqual"
  op: "NotEqual"
  input: "GatherNd"
  input: "count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "count_nonzero/ToInt64"
  op: "Cast"
  input: "count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "count_nonzero/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "count_nonzero/Sum"
  op: "Sum"
  input: "count_nonzero/ToInt64"
  input: "count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Shape_2"
  op: "Shape"
  input: "GatherNd"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape_2"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "strided_slice"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "truediv/Cast"
  op: "Cast"
  input: "count_nonzero/Sum"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "truediv/Cast_1"
  op: "Cast"
  input: "Cast"
  attr {
    key: "DstT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "truediv/Cast"
  input: "truediv/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "Variable/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
}
node {
  name: "ExponentialDecay/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0005000000237487257
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "Variable/read"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Floor"
  op: "Floor"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "lanenet_loss/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^lanenet_loss/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPushV2"
  input: "^gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPushV2"
  input: "^gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPushV2"
  input: "^gradients/lanenet_loss/while/Mean_grad/Prod/StackPushV2"
  input: "^gradients/lanenet_loss/while/Mean_grad/Tile/StackPushV2"
  input: "^gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPushV2"
  input: "^gradients/lanenet_loss/while/Square_1_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/Square_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/Sum_grad/Tile/StackPushV2"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^gradients/lanenet_loss/while/Tile_1_grad/stack/StackPushV2"
  input: "^gradients/lanenet_loss/while/Tile_1_grad/stack/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/Tile_grad/stack/StackPushV2"
  input: "^gradients/lanenet_loss/while/Tile_grad/stack/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPushV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPushV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPushV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPushV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/div_1_grad/Neg/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/div_grad/Neg/StackPushV2"
  input: "^gradients/lanenet_loss/while/div_grad/RealDiv/StackPushV2"
  input: "^gradients/lanenet_loss/while/mul_1_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/mul_2_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/mul_3_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/mul_4_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPushV2"
  input: "^gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPushV2"
  input: "^gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPushV2_1"
  input: "^gradients/lanenet_loss/while/truediv_grad/Neg/StackPushV2"
  input: "^gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/Fill"
}
node {
  name: "gradients/lanenet_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/lanenet_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/Fill"
  input: "^gradients/lanenet_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/Fill"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/add_grad/tuple/control_dependency"
  input: "lanenet_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/add_grad/tuple/control_dependency"
  input: "lanenet_loss/mul/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/mul_grad/Mul"
  input: "^gradients/lanenet_loss/mul_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/mul_grad/Mul"
  input: "^gradients/lanenet_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/mul_grad/Mul_1"
  input: "^gradients/lanenet_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/mul_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/add_grad/tuple/control_dependency_1"
  input: "lanenet_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/add_grad/tuple/control_dependency_1"
  input: "lanenet_loss/mul_1/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/mul_1_grad/Mul"
  input: "^gradients/lanenet_loss/mul_1_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/mul_1_grad/Mul"
  input: "^gradients/lanenet_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/mul_1_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/mul_1_grad/Mul_1"
  input: "^gradients/lanenet_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/mul_1_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/mul_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/Mean_grad/Reshape"
  input: "gradients/lanenet_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 524288.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/Mean_grad/Tile"
  input: "gradients/lanenet_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/Mean_1_grad/Reshape"
  input: "gradients/lanenet_loss/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/lanenet_loss/Mean_1_grad/Shape_1"
  input: "gradients/lanenet_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/lanenet_loss/Mean_1_grad/Shape_2"
  input: "gradients/lanenet_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/Mean_1_grad/Prod_1"
  input: "gradients/lanenet_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/Mean_1_grad/Prod"
  input: "gradients/lanenet_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/lanenet_loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/Mean_1_grad/Tile"
  input: "gradients/lanenet_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss/Reshape_2_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 524288
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/Mean_grad/truediv"
  input: "gradients/lanenet_loss/entropy_loss/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lanenet_loss/TensorArray"
  input: "lanenet_loss/while/Exit_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lanenet_loss/while/Exit_2"
  input: "^gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lanenet_loss/TensorArrayStack/range"
  input: "gradients/lanenet_loss/Mean_1_grad/truediv"
  input: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Fill"
  input: "gradients/zeros/shape_as_tensor"
  input: "gradients/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_1/shape_as_tensor"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/zeros_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Fill"
  input: "gradients/zeros_1/shape_as_tensor"
  input: "gradients/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "lanenet_loss/entropy_loss:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/lanenet_loss/entropy_loss/Reshape_2_grad/Reshape"
  input: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/mul"
  op: "Mul"
  input: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims"
  input: "lanenet_loss/entropy_loss:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "lanenet_loss/entropy_loss/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/entropy_loss_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "gradients/lanenet_loss/entropy_loss/Reshape_2_grad/Reshape"
  input: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/entropy_loss_grad/ExpandDims_1"
  input: "gradients/lanenet_loss/entropy_loss_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/entropy_loss_grad/mul"
  input: "^gradients/lanenet_loss/entropy_loss_grad/mul_1"
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/entropy_loss_grad/mul"
  input: "^gradients/lanenet_loss/entropy_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/entropy_loss_grad/mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/entropy_loss_grad/mul_1"
  input: "^gradients/lanenet_loss/entropy_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/entropy_loss_grad/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/lanenet_loss/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Exit_5_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\000\000\002\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/entropy_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/entropy_loss_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/entropy_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/lanenet_loss/while/Exit_2_grad/b_exit"
  input: "gradients/lanenet_loss/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/entropy_loss/Reshape_grad/Reshape"
  input: "gradients/lanenet_loss/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/lanenet_loss/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/Merge_2_grad/Switch"
}
node {
  name: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Merge_2_grad/Switch"
  input: "^gradients/lanenet_loss/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Merge_2_grad/Switch:1"
  input: "^gradients/lanenet_loss/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "lanenet_loss/inference/decode/score_final/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/decode/score_final/W/read"
  input: "gradients/lanenet_loss/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_4"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lanenet_loss/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Identity_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Identity_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "lanenet_loss/while/Identity_6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPopV2"
  input: "^gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPopV2"
  input: "^gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPopV2"
  input: "^gradients/lanenet_loss/while/Mean_grad/Prod/StackPopV2"
  input: "^gradients/lanenet_loss/while/Mean_grad/Tile/StackPopV2"
  input: "^gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPopV2"
  input: "^gradients/lanenet_loss/while/Square_1_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/Square_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/Sum_grad/Tile/StackPopV2"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2"
  input: "^gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2"
  input: "^gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPopV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPopV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPopV2"
  input: "^gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/div_1_grad/Neg/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/div_grad/Neg/StackPopV2"
  input: "^gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2"
  input: "^gradients/lanenet_loss/while/mul_1_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/mul_2_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/mul_3_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/mul_4_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2"
  input: "^gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2"
  input: "^gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2_1"
  input: "^gradients/lanenet_loss/while/truediv_grad/Neg/StackPopV2"
  input: "^gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2"
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Merge_2_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/Enter"
  input: "lanenet_loss/while/add_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/mul_4_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_4_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_4_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_4_grad/Mul_1"
  input: "^gradients/lanenet_loss/while/mul_4_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/mul_4_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_4_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_4_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/while/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/lanenet_loss/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency"
}
node {
  name: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency"
  input: "^gradients/lanenet_loss/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency"
  input: "^gradients/lanenet_loss/while/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_4_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Mean_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Mean_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/Enter"
  input: "lanenet_loss/while/Mean_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_3_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/mul_3_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_3_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_3_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_3_grad/Mul_1"
  input: "^gradients/lanenet_loss/while/mul_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_3_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/truediv"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/truediv"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/Enter"
  input: "lanenet_loss/while/truediv"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/mul_1_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_1_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_1_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_1_grad/Mul_1"
  input: "^gradients/lanenet_loss/while/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_1_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Mean"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/Enter"
  input: "lanenet_loss/while/Mean"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/add_2_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/Mul_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/mul_2_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_2_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul"
  input: "^gradients/lanenet_loss/while/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_2_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/mul_2_grad/Mul_1"
  input: "^gradients/lanenet_loss/while/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/mul_2_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/mul_3_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/norm_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Reshape"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Tile/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/norm_2/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Shape_2"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod_1"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Prod"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients/lanenet_loss/while/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Tile"
  input: "gradients/lanenet_loss/while/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/truediv_grad/Shape"
  input: "gradients/lanenet_loss/while/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Cast_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Cast_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/Enter"
  input: "lanenet_loss/while/Cast_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv"
  input: "gradients/lanenet_loss/while/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/truediv_grad/Sum"
  input: "gradients/lanenet_loss/while/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/Enter"
  input: "lanenet_loss/while/Sum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/truediv_grad/Neg"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv_1"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/mul_1_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/truediv_grad/mul"
  input: "gradients/lanenet_loss/while/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/truediv_grad/Sum_1"
  input: "gradients/lanenet_loss/while/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/truediv_grad/Reshape"
  input: "^gradients/lanenet_loss/while/truediv_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/truediv_grad/Reshape"
  input: "^gradients/lanenet_loss/while/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/truediv_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/truediv_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/truediv_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/mul_2_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/Mean_grad/Reshape"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Tile/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Mean_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/lanenet_loss/while/Mean_grad/Shape_2"
  input: "gradients/lanenet_loss/while/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod_1"
  input: "gradients/lanenet_loss/while/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/while/Mean_grad/Prod"
  input: "gradients/lanenet_loss/while/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/lanenet_loss/while/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/Mean_grad/Tile"
  input: "gradients/lanenet_loss/while/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/norm_2/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Mean_1_grad/truediv"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/Enter"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/truediv_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/div_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/Sum_grad/Reshape"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/Enter"
  input: "gradients/lanenet_loss/while/Sum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sum_grad/Tile/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Const"
  op: "Const"
  input: "^gradients/lanenet_loss/while/Mean_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/StackPopV2"
  input: "gradients/lanenet_loss/while/Square_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/Enter"
  input: "lanenet_loss/while/clip_by_value_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_1_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/Mean_grad/truediv"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad"
  op: "SqrtGrad"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm_2/Sqrt"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm_2/Sqrt"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/Enter"
  input: "lanenet_loss/while/norm_2/Sqrt"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/UnsortedSegmentSum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/div_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Cast"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Cast"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/Enter"
  input: "lanenet_loss/while/Cast"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/div_1_grad/Sum"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UnsortedSegmentSum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UnsortedSegmentSum_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/Enter"
  input: "lanenet_loss/while/UnsortedSegmentSum_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/div_1_grad/Neg"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv_1"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/div_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/div_1_grad/mul"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/div_1_grad/Sum_1"
  input: "gradients/lanenet_loss/while/div_1_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/div_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/div_1_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/div_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/div_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/div_1_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/div_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape_2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Enter"
  input: "lanenet_loss/while/clip_by_value_1/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/zeros"
  input: "gradients/lanenet_loss/while/Square_1_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Select_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Sum_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/norm_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/add"
  op: "Add"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/add/Const"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/add"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/range"
  op: "Range"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/range/start"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Size"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Shape_1"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/range"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/mod"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/Enter"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_2/Sqrt_grad/SqrtGrad"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Reshape"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like/shape_as_tensor"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UniqueWithCounts"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UniqueWithCounts"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/Enter"
  input: "lanenet_loss/while/UniqueWithCounts:1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GatherV2/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GatherV2"
  op: "GatherV2"
  input: "gradients/lanenet_loss/while/div_1_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GreaterEqual/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like/Shape"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/and"
  op: "LogicalAnd"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/ones_like"
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1/shape_as_tensor"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/and"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/GatherV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Sub_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/Enter"
  input: "lanenet_loss/while/Sub_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/zeros"
  input: "gradients/lanenet_loss/while/clip_by_value_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Select"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/Enter"
  input: "lanenet_loss/while/div"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Sum"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_2/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Mul_1"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Sum_1"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/Reshape"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Reshape"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/norm_2/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_2/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Const"
  op: "Const"
  input: "^gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Select"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/StackPopV2"
  input: "gradients/lanenet_loss/while/Square_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/Enter"
  input: "lanenet_loss/while/clip_by_value"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Square_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Square_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Select"
  input: "gradients/lanenet_loss/while/Square_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_1/Minimum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/norm_1/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Shape"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_3_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Sum"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Sum"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Neg"
  input: "gradients/lanenet_loss/while/Sub_3_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_3_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/Sub_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Shape_2"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Enter"
  input: "lanenet_loss/while/clip_by_value/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual/Const_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Shape"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/Square_grad/Mul_1"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/zeros"
  input: "gradients/lanenet_loss/while/Square_grad/Mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Select"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Select_1"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Sum_1"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/clip_by_value_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/norm_1/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_3_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Squeeze_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/Enter"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape_2"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/Enter"
  input: "lanenet_loss/while/Sub_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/zeros"
  input: "gradients/lanenet_loss/while/clip_by_value_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Select"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Sum"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Select_1"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Sum_1"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad"
  op: "SqrtGrad"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm_1/Sqrt"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm_1/Sqrt"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/Enter"
  input: "lanenet_loss/while/norm_1/Sqrt"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/clip_by_value/Minimum_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/clip_by_value/Minimum_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Shape"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/lanenet_loss/while/Sub_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Sum"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_1"
  input: "gradients/lanenet_loss/while/Sub_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Neg"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/Sub_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_1_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_1_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/Sub_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/add"
  op: "Add"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/add/Const"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/add"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/range"
  op: "Range"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/range/start"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Size"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Shape_1"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/range"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/mod"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/Enter"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_1/Sqrt_grad/SqrtGrad"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Reshape"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Squeeze_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_1_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/norm/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/boolean_mask/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/boolean_mask/GatherV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/GatherV2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/GatherV2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/Enter"
  input: "lanenet_loss/while/boolean_mask/GatherV2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Sum"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul/StackPopV2"
  input: "gradients/lanenet_loss/while/norm_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Mul_1"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Sum_1"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/Reshape"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Reshape"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm_1/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/norm_1/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad"
  op: "SqrtGrad"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPopV2"
  input: "gradients/lanenet_loss/while/norm/Squeeze_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm/Sqrt"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/norm/Sqrt"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/Enter"
  input: "lanenet_loss/while/norm/Sqrt"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/norm_1/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm_1/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/boolean_mask/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32"
  op: "Cast"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPopV2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Size"
  op: "Size"
  input: "lanenet_loss/while/boolean_mask/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Size"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Size"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Size"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/strided_slice"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Squeeze"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/boolean_mask/Squeeze"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/Enter"
  input: "lanenet_loss/while/boolean_mask/Squeeze"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/add"
  op: "Add"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/add/Const"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/add/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/add"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/range"
  op: "Range"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/range/start"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Size"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Fill/value"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Shape_1"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/range"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/mod"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Shape"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Maximum/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/DynamicStitch"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Shape"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/Sum_grad/Shape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/norm/Sqrt_grad/SqrtGrad"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Reshape"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/ToInt32"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack_1"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape"
  input: "gradients/lanenet_loss/while/boolean_mask/GatherV2_grad/Reshape_1"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/tensor"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/Enter"
  input: "lanenet_loss/while/Sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/Mul_1"
  op: "Mul"
  input: "gradients/lanenet_loss/while/norm/Sum_grad/Tile"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/Mul"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/Mul_1"
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/norm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/norm/mul_grad/Mul_1"
  input: "^gradients/lanenet_loss/while/norm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/mul_grad/Mul_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Sum"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/boolean_mask/Reshape_grad/Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Neg"
  input: "gradients/lanenet_loss/while/Sub_2_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Reshape"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_2_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/Sub_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/lanenet_loss/while/norm/mul_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/norm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_grad/Neg"
  op: "Neg"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/AddN_3"
  input: "^gradients/lanenet_loss/while/Sub_grad/Neg"
}
node {
  name: "gradients/lanenet_loss/while/Sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/AddN_3"
  input: "^gradients/lanenet_loss/while/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/norm/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/Sub_grad/Neg"
  input: "^gradients/lanenet_loss/while/Sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_grad/Neg"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/Tile_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Reshape_3_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Reshape_3_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/Enter"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack"
  op: "Pack"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Tile/multiples"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Tile/multiples"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/Enter"
  input: "lanenet_loss/while/Tile/multiples"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Tile_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Tile_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/Enter_1"
  input: "gradients/lanenet_loss/while/Tile_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/stack/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_grad/stack/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/Rank"
  op: "Rank"
  input: "gradients/lanenet_loss/while/Tile_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/sub/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/sub"
  op: "Sub"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/Rank"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/Range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/Range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/Range"
  op: "Range"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/Range/start"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/Rank"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose/sub_1"
  op: "Sub"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/sub"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/transpose"
  op: "Transpose"
  input: "gradients/lanenet_loss/while/Tile_grad/stack"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Tile_grad/transpose"
  input: "gradients/lanenet_loss/while/Tile_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/range"
  op: "Range"
  input: "gradients/lanenet_loss/while/Tile_grad/range/start"
  input: "gradients/lanenet_loss/while/Tile_grad/Size"
  input: "gradients/lanenet_loss/while/Tile_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_2_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/Tile_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/Tile_grad/Reshape_1"
  input: "gradients/lanenet_loss/while/Tile_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32"
  op: "Cast"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPopV2"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/Enter"
  input: "gradients/lanenet_loss/while/GatherV2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/div"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/lanenet_loss/while/GatherV2_grad/Size"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ToInt32"
  input: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack"
  input: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack_1"
  input: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/concat"
  op: "ConcatV2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ExpandDims"
  input: "gradients/lanenet_loss/while/GatherV2_grad/strided_slice"
  input: "gradients/lanenet_loss/while/GatherV2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Sub_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/GatherV2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/GatherV2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/div"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack"
  op: "Pack"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Tile_1/multiples"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Tile_1/multiples"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/Enter"
  input: "lanenet_loss/while/Tile_1/multiples"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Tile_1_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Tile_1_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/Enter_1"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/stack/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Rank"
  op: "Rank"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub"
  op: "Sub"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Rank"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range"
  op: "Range"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range/start"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Rank"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub_1"
  op: "Sub"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/Range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/transpose"
  op: "Transpose"
  input: "gradients/lanenet_loss/while/Tile_1_grad/stack"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose/sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Reshape/shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Tile_1_grad/transpose"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Size"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/range"
  op: "Range"
  input: "gradients/lanenet_loss/while/Tile_1_grad/range/start"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Size"
  input: "gradients/lanenet_loss/while/Tile_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/Reshape_3_grad/Reshape"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Tile_1_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Reshape_1"
  input: "gradients/lanenet_loss/while/Tile_1_grad/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape_1"
  op: "Shape"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_1"
  input: "gradients/strided_slice/stack"
  input: "gradients/strided_slice/stack_1"
  input: "gradients/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range"
  op: "Range"
  input: "gradients/range/start"
  input: "gradients/strided_slice"
  input: "gradients/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Shape_2"
  op: "Shape"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_1"
  op: "StridedSlice"
  input: "gradients/Shape_2"
  input: "gradients/strided_slice_1/stack"
  input: "gradients/strided_slice_1/stack_1"
  input: "gradients/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_1/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_1/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_1"
  op: "Range"
  input: "gradients/range_1/start"
  input: "gradients/strided_slice_1"
  input: "gradients/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Shape_3"
  op: "Shape"
  input: "gradients/lanenet_loss/while/Tile_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_2"
  op: "StridedSlice"
  input: "gradients/Shape_3"
  input: "gradients/strided_slice_2/stack"
  input: "gradients/strided_slice_2/stack_1"
  input: "gradients/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_2/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_2/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_2"
  op: "Range"
  input: "gradients/range_2/start"
  input: "gradients/strided_slice_2"
  input: "gradients/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Shape_4"
  op: "Shape"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/strided_slice_3"
  op: "StridedSlice"
  input: "gradients/Shape_4"
  input: "gradients/strided_slice_3/stack"
  input: "gradients/strided_slice_3/stack_1"
  input: "gradients/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/range_3/start"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/range_3/delta"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/range_3"
  op: "Range"
  input: "gradients/range_3/start"
  input: "gradients/strided_slice_3"
  input: "gradients/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat"
  op: "ConcatV2"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/norm_2/mul_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/Tile_grad/Sum"
  input: "gradients/lanenet_loss/while/GatherV2_grad/Reshape"
  input: "gradients/lanenet_loss/while/Tile_1_grad/Sum"
  input: "gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/concat_1/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_1"
  op: "ConcatV2"
  input: "gradients/range"
  input: "gradients/range_1"
  input: "gradients/range_2"
  input: "gradients/lanenet_loss/while/GatherV2_grad/Reshape_1"
  input: "gradients/range_3"
  input: "gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Shape"
  op: "Shape"
  input: "lanenet_loss/while/UnsortedSegmentSum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Shape_1"
  op: "Shape"
  input: "lanenet_loss/while/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Shape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Enter"
  input: "gradients/lanenet_loss/while/div_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Shape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Shape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/Enter_1"
  input: "gradients/lanenet_loss/while/div_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_1"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack_1"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/x"
  op: "UnsortedSegmentSum"
  input: "gradients/concat"
  input: "gradients/concat_1"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/x"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Reshape_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/Reshape_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/Enter"
  input: "lanenet_loss/while/Reshape_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Sum"
  op: "Sum"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Reshape"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/div_grad/Sum"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg"
  op: "Neg"
  input: "gradients/lanenet_loss/while/div_grad/Neg/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UnsortedSegmentSum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/div_grad/Neg/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/UnsortedSegmentSum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/div_grad/Neg/Enter"
  input: "lanenet_loss/while/UnsortedSegmentSum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/div_grad/Neg/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Neg/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/div_grad/Neg/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/div_grad/Neg"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv_1"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul/strided_slice"
  op: "StridedSlice"
  input: "gradients/Shape_1"
  input: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack"
  input: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack_1"
  input: "gradients/lanenet_loss/while/div_grad/mul/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul/x"
  op: "UnsortedSegmentSum"
  input: "gradients/concat"
  input: "gradients/concat_1"
  input: "gradients/lanenet_loss/while/div_grad/mul/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/mul"
  op: "Mul"
  input: "gradients/lanenet_loss/while/div_grad/mul/x"
  input: "gradients/lanenet_loss/while/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Sum_1"
  op: "Sum"
  input: "gradients/lanenet_loss/while/div_grad/mul"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lanenet_loss/while/div_grad/Sum_1"
  input: "gradients/lanenet_loss/while/div_grad/BroadcastGradientArgs/StackPopV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/while/div_grad/Reshape"
  input: "^gradients/lanenet_loss/while/div_grad/Reshape_1"
}
node {
  name: "gradients/lanenet_loss/while/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/while/div_grad/Reshape"
  input: "^gradients/lanenet_loss/while/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/while/div_grad/Reshape_1"
  input: "^gradients/lanenet_loss/while/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/div_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 131072
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like/shape_as_tensor"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/Maximum"
  op: "Maximum"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GatherV2/axis"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GatherV2"
  op: "GatherV2"
  input: "gradients/lanenet_loss/while/div_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/Maximum"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GreaterEqual/y"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_1_grad/Maximum/StackPopV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GreaterEqual"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like/Shape"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/and"
  op: "LogicalAnd"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ExpandDims"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/ones_like"
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1/shape_as_tensor"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\002\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1"
  op: "Fill"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1/shape_as_tensor"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/Select"
  op: "Select"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/and"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/GatherV2"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/lanenet_loss/while/Sub_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/while/UnsortedSegmentSum_grad/Select"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/while/Sub_grad/Neg"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\001\000\000\000\002\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_4"
  input: "gradients/lanenet_loss/while/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/Shape"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2_1"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const_2"
  input: "gradients/lanenet_loss/while/Reshape_1_grad/Reshape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPushV2"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Enter"
  input: "lanenet_loss/while/strided_slice_1/stack"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  op: "StackV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Enter_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPushV2_1"
  op: "StackPushV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Enter_1"
  input: "lanenet_loss/while/strided_slice_1/stack_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2_1"
  op: "StackPopV2"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2_1/Enter"
  input: "^gradients/Sub"
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/StackPopV2_1/Enter"
  op: "Enter"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad/Const_2"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lanenet_loss/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_1"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/Switch:1"
  input: "gradients/lanenet_loss/while/strided_slice_1_grad/StridedSliceGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/while/strided_slice_1/Enter_grad/b_acc_3"
  input: "lanenet_loss/pix_embedding_relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "lanenet_loss/pix_embedding_conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/pix_embedding_conv/W/read"
  input: "gradients/lanenet_loss/pix_embedding_relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/pix_embedding_relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/AddN_5"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Shape"
  input: "lanenet_loss/inference/decode/fuse_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 8
        i: 8
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/AddN_5"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 8
        i: 8
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Shape"
  input: "lanenet_loss/inference/decode/fuse_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency_1"
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "^gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/decode/score_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/decode/score_2/W/read"
  input: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/decode/fuse_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Shape"
  input: "lanenet_loss/inference/decode/score_origin/score_origin"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2D"
  input: "^gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/Conv2D"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/decode/score_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/decode/score_1/W/read"
  input: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/decode/fuse_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/avgpool"
  input: "lanenet_loss/inference/decode/score_origin/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/decode/score_origin/W/read"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/avgpool"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/avgpool_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/avgpool_grad/AvgPoolGrad"
  op: "AvgPoolGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/avgpool_grad/Shape"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_2"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_3"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_4"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_5"
  op: "Shape"
  input: "gradients/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_5/Const"
  op: "Const"
  input: "^gradients/Switch_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_5"
  op: "Fill"
  input: "gradients/Shape_5"
  input: "gradients/zeros_5/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_6"
  op: "Shape"
  input: "gradients/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_6/Const"
  op: "Const"
  input: "^gradients/Switch_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_6"
  op: "Fill"
  input: "gradients/Shape_6"
  input: "gradients/zeros_6/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_5"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_6"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_7"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_8"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_4"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_7"
  op: "Shape"
  input: "gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_7/Const"
  op: "Const"
  input: "^gradients/Switch_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_7"
  op: "Fill"
  input: "gradients/Shape_7"
  input: "gradients/zeros_7/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_7"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_5"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_8"
  op: "Shape"
  input: "gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_8/Const"
  op: "Const"
  input: "^gradients/Switch_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_8"
  op: "Fill"
  input: "gradients/Shape_8"
  input: "gradients/zeros_8/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_8"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_6"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_6"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_9"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_10"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_11"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_12"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_6"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_9"
  op: "Shape"
  input: "gradients/Switch_6:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_9/Const"
  op: "Const"
  input: "^gradients/Switch_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_9"
  op: "Fill"
  input: "gradients/Shape_9"
  input: "gradients/zeros_9/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_7"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_10"
  op: "Shape"
  input: "gradients/Switch_7:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_10/Const"
  op: "Const"
  input: "^gradients/Switch_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_10"
  op: "Fill"
  input: "gradients/Shape_10"
  input: "gradients/zeros_10/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_13"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_14"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_15"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_16"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_8"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_11"
  op: "Shape"
  input: "gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_11/Const"
  op: "Const"
  input: "^gradients/Switch_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_11"
  op: "Fill"
  input: "gradients/Shape_11"
  input: "gradients/zeros_11/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_11"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_9"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_12"
  op: "Shape"
  input: "gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_12/Const"
  op: "Const"
  input: "^gradients/Switch_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_12"
  op: "Fill"
  input: "gradients/Shape_12"
  input: "gradients/zeros_12/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_12"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_8"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_9"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/read"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_17"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_18"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_19"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_20"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_10"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_13"
  op: "Shape"
  input: "gradients/Switch_10:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_13/Const"
  op: "Const"
  input: "^gradients/Switch_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_13"
  op: "Fill"
  input: "gradients/Shape_13"
  input: "gradients/zeros_13/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_11"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_14"
  op: "Shape"
  input: "gradients/Switch_11:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_14/Const"
  op: "Const"
  input: "^gradients/Switch_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_14"
  op: "Fill"
  input: "gradients/Shape_14"
  input: "gradients/zeros_14/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_21"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_22"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_23"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_24"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_12"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_15"
  op: "Shape"
  input: "gradients/Switch_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_15/Const"
  op: "Const"
  input: "^gradients/Switch_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_15"
  op: "Fill"
  input: "gradients/Shape_15"
  input: "gradients/zeros_15/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_15"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_13"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_16"
  op: "Shape"
  input: "gradients/Switch_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_16/Const"
  op: "Const"
  input: "^gradients/Switch_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_16"
  op: "Fill"
  input: "gradients/Shape_16"
  input: "gradients/zeros_16/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_16"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_10"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\020\000\000\000 \000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_10"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_10"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_11"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_25"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_26"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_27"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_28"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_14"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_17"
  op: "Shape"
  input: "gradients/Switch_14:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_17/Const"
  op: "Const"
  input: "^gradients/Switch_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_17"
  op: "Fill"
  input: "gradients/Shape_17"
  input: "gradients/zeros_17/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_15"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_18"
  op: "Shape"
  input: "gradients/Switch_15:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_18/Const"
  op: "Const"
  input: "^gradients/Switch_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_18"
  op: "Fill"
  input: "gradients/Shape_18"
  input: "gradients/zeros_18/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_29"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_30"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_31"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_32"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_16"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_19"
  op: "Shape"
  input: "gradients/Switch_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_19/Const"
  op: "Const"
  input: "^gradients/Switch_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_19"
  op: "Fill"
  input: "gradients/Shape_19"
  input: "gradients/zeros_19/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_19"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_17"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_20"
  op: "Shape"
  input: "gradients/Switch_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_20/Const"
  op: "Const"
  input: "^gradients/Switch_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_20"
  op: "Fill"
  input: "gradients/Shape_20"
  input: "gradients/zeros_20/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_20"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_12"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_13"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/read"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_33"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_34"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_35"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_36"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_18"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_21"
  op: "Shape"
  input: "gradients/Switch_18:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_21/Const"
  op: "Const"
  input: "^gradients/Switch_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_21"
  op: "Fill"
  input: "gradients/Shape_21"
  input: "gradients/zeros_21/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_19"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_22"
  op: "Shape"
  input: "gradients/Switch_19:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_22/Const"
  op: "Const"
  input: "^gradients/Switch_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_22"
  op: "Fill"
  input: "gradients/Shape_22"
  input: "gradients/zeros_22/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_22"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_37"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_38"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_39"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_40"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_20"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_23"
  op: "Shape"
  input: "gradients/Switch_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_23/Const"
  op: "Const"
  input: "^gradients/Switch_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_23"
  op: "Fill"
  input: "gradients/Shape_23"
  input: "gradients/zeros_23/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_23"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_21"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_24"
  op: "Shape"
  input: "gradients/Switch_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_24/Const"
  op: "Const"
  input: "^gradients/Switch_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_24"
  op: "Fill"
  input: "gradients/Shape_24"
  input: "gradients/zeros_24/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_24"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_14"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/avgpool_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/avgpool_grad/AvgPoolGrad"
  op: "AvgPoolGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/avgpool_grad/Shape"
  input: "gradients/AddN_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_15"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_41"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_42"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_43"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_44"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_22"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_25"
  op: "Shape"
  input: "gradients/Switch_22:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_25/Const"
  op: "Const"
  input: "^gradients/Switch_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_25"
  op: "Fill"
  input: "gradients/Shape_25"
  input: "gradients/zeros_25/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_25"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_23"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_26"
  op: "Shape"
  input: "gradients/Switch_23:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_26/Const"
  op: "Const"
  input: "^gradients/Switch_23"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_26"
  op: "Fill"
  input: "gradients/Shape_26"
  input: "gradients/zeros_26/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_26"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_45"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_46"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_47"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_48"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_24"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_27"
  op: "Shape"
  input: "gradients/Switch_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_27/Const"
  op: "Const"
  input: "^gradients/Switch_24"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_27"
  op: "Fill"
  input: "gradients/Shape_27"
  input: "gradients/zeros_27/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_27"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_25"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_28"
  op: "Shape"
  input: "gradients/Switch_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_28/Const"
  op: "Const"
  input: "^gradients/Switch_25"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_28"
  op: "Fill"
  input: "gradients/Shape_28"
  input: "gradients/zeros_28/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_28"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_16"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_16"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_16"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_17"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_49"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_50"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_51"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_52"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_26"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_29"
  op: "Shape"
  input: "gradients/Switch_26:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_29/Const"
  op: "Const"
  input: "^gradients/Switch_26"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_29"
  op: "Fill"
  input: "gradients/Shape_29"
  input: "gradients/zeros_29/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_29"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_27"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_30"
  op: "Shape"
  input: "gradients/Switch_27:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_30/Const"
  op: "Const"
  input: "^gradients/Switch_27"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_30"
  op: "Fill"
  input: "gradients/Shape_30"
  input: "gradients/zeros_30/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_30"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_53"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_54"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_55"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_56"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_28"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_31"
  op: "Shape"
  input: "gradients/Switch_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_31/Const"
  op: "Const"
  input: "^gradients/Switch_28"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_31"
  op: "Fill"
  input: "gradients/Shape_31"
  input: "gradients/zeros_31/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_31"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_29"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_32"
  op: "Shape"
  input: "gradients/Switch_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_32/Const"
  op: "Const"
  input: "^gradients/Switch_29"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_32"
  op: "Fill"
  input: "gradients/Shape_32"
  input: "gradients/zeros_32/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_32"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_18"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_19"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/read"
  input: "gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_57"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_58"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_59"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_60"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_30"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_33"
  op: "Shape"
  input: "gradients/Switch_30:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_33/Const"
  op: "Const"
  input: "^gradients/Switch_30"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_33"
  op: "Fill"
  input: "gradients/Shape_33"
  input: "gradients/zeros_33/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_33"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_31"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_34"
  op: "Shape"
  input: "gradients/Switch_31:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_34/Const"
  op: "Const"
  input: "^gradients/Switch_31"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_34"
  op: "Fill"
  input: "gradients/Shape_34"
  input: "gradients/zeros_34/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_34"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_61"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_62"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_63"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_64"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_32"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_35"
  op: "Shape"
  input: "gradients/Switch_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_35/Const"
  op: "Const"
  input: "^gradients/Switch_32"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_35"
  op: "Fill"
  input: "gradients/Shape_35"
  input: "gradients/zeros_35/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_35"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_33"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_36"
  op: "Shape"
  input: "gradients/Switch_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_36/Const"
  op: "Const"
  input: "^gradients/Switch_33"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_36"
  op: "Fill"
  input: "gradients/Shape_36"
  input: "gradients/zeros_36/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_36"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_20"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000 \000\000\000@\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_20"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_20"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_21"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_65"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_66"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_67"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_68"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_34"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_37"
  op: "Shape"
  input: "gradients/Switch_34:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_37/Const"
  op: "Const"
  input: "^gradients/Switch_34"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_37"
  op: "Fill"
  input: "gradients/Shape_37"
  input: "gradients/zeros_37/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_37"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_35"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_38"
  op: "Shape"
  input: "gradients/Switch_35:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_38/Const"
  op: "Const"
  input: "^gradients/Switch_35"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_38"
  op: "Fill"
  input: "gradients/Shape_38"
  input: "gradients/zeros_38/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_38"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_69"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_70"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_71"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_72"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_36"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_39"
  op: "Shape"
  input: "gradients/Switch_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_39/Const"
  op: "Const"
  input: "^gradients/Switch_36"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_39"
  op: "Fill"
  input: "gradients/Shape_39"
  input: "gradients/zeros_39/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_39"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_37"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_40"
  op: "Shape"
  input: "gradients/Switch_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_40/Const"
  op: "Const"
  input: "^gradients/Switch_37"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_40"
  op: "Fill"
  input: "gradients/Shape_40"
  input: "gradients/zeros_40/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_40"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_22"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_23"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/read"
  input: "gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_73"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_74"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_75"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_76"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_38"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_41"
  op: "Shape"
  input: "gradients/Switch_38:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_41/Const"
  op: "Const"
  input: "^gradients/Switch_38"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_41"
  op: "Fill"
  input: "gradients/Shape_41"
  input: "gradients/zeros_41/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_41"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_39"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_42"
  op: "Shape"
  input: "gradients/Switch_39:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_42/Const"
  op: "Const"
  input: "^gradients/Switch_39"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_42"
  op: "Fill"
  input: "gradients/Shape_42"
  input: "gradients/zeros_42/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_42"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_77"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_78"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_79"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_80"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_40"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_43"
  op: "Shape"
  input: "gradients/Switch_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_43/Const"
  op: "Const"
  input: "^gradients/Switch_40"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_43"
  op: "Fill"
  input: "gradients/Shape_43"
  input: "gradients/zeros_43/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_43"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_41"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_44"
  op: "Shape"
  input: "gradients/Switch_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_44/Const"
  op: "Const"
  input: "^gradients/Switch_41"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_44"
  op: "Fill"
  input: "gradients/Shape_44"
  input: "gradients/zeros_44/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_44"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_24"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/control_dependency"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/avgpool_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000@\000\000\000\200\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/avgpool_grad/AvgPoolGrad"
  op: "AvgPoolGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/avgpool_grad/Shape"
  input: "gradients/AddN_24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_25"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_81"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_82"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_83"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_84"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_42"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_45"
  op: "Shape"
  input: "gradients/Switch_42:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_45/Const"
  op: "Const"
  input: "^gradients/Switch_42"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_45"
  op: "Fill"
  input: "gradients/Shape_45"
  input: "gradients/zeros_45/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_45"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_43"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_46"
  op: "Shape"
  input: "gradients/Switch_43:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_46/Const"
  op: "Const"
  input: "^gradients/Switch_43"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_46"
  op: "Fill"
  input: "gradients/Shape_46"
  input: "gradients/zeros_46/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_46"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_85"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_86"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_87"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_88"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_44"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_47"
  op: "Shape"
  input: "gradients/Switch_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_47/Const"
  op: "Const"
  input: "^gradients/Switch_44"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_47"
  op: "Fill"
  input: "gradients/Shape_47"
  input: "gradients/zeros_47/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_47"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_45"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_48"
  op: "Shape"
  input: "gradients/Switch_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_48/Const"
  op: "Const"
  input: "^gradients/Switch_45"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_48"
  op: "Fill"
  input: "gradients/Shape_48"
  input: "gradients/zeros_48/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_48"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_26"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000@\000\000\000\200\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000@\000\000\000\200\000\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_26"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_26"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_27"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_89"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_90"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_91"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_92"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_46"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_49"
  op: "Shape"
  input: "gradients/Switch_46:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_49/Const"
  op: "Const"
  input: "^gradients/Switch_46"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_49"
  op: "Fill"
  input: "gradients/Shape_49"
  input: "gradients/zeros_49/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_49"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_47"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_50"
  op: "Shape"
  input: "gradients/Switch_47:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_50/Const"
  op: "Const"
  input: "^gradients/Switch_47"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_50"
  op: "Fill"
  input: "gradients/Shape_50"
  input: "gradients/zeros_50/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_50"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_93"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_94"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_95"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_96"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_48"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_51"
  op: "Shape"
  input: "gradients/Switch_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_51/Const"
  op: "Const"
  input: "^gradients/Switch_48"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_51"
  op: "Fill"
  input: "gradients/Shape_51"
  input: "gradients/zeros_51/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_51"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_49"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_52"
  op: "Shape"
  input: "gradients/Switch_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_52/Const"
  op: "Const"
  input: "^gradients/Switch_49"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_52"
  op: "Fill"
  input: "gradients/Shape_52"
  input: "gradients/zeros_52/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_52"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_28"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_29"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/read"
  input: "gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_97"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_98"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_99"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_100"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_50"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_53"
  op: "Shape"
  input: "gradients/Switch_50:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_53/Const"
  op: "Const"
  input: "^gradients/Switch_50"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_53"
  op: "Fill"
  input: "gradients/Shape_53"
  input: "gradients/zeros_53/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_53"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_51"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_54"
  op: "Shape"
  input: "gradients/Switch_51:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_54/Const"
  op: "Const"
  input: "^gradients/Switch_51"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_54"
  op: "Fill"
  input: "gradients/Shape_54"
  input: "gradients/zeros_54/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_54"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_101"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_102"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_103"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_104"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_52"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_55"
  op: "Shape"
  input: "gradients/Switch_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_55/Const"
  op: "Const"
  input: "^gradients/Switch_52"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_55"
  op: "Fill"
  input: "gradients/Shape_55"
  input: "gradients/zeros_55/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_55"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_53"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_56"
  op: "Shape"
  input: "gradients/Switch_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_56/Const"
  op: "Const"
  input: "^gradients/Switch_53"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_56"
  op: "Fill"
  input: "gradients/Shape_56"
  input: "gradients/zeros_56/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_56"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_30"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000@\000\000\000\200\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000@\000\000\000\200\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_30"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_30"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_31"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_105"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_106"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_107"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_108"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_54"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_57"
  op: "Shape"
  input: "gradients/Switch_54:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_57/Const"
  op: "Const"
  input: "^gradients/Switch_54"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_57"
  op: "Fill"
  input: "gradients/Shape_57"
  input: "gradients/zeros_57/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_57"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_55"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_58"
  op: "Shape"
  input: "gradients/Switch_55:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_58/Const"
  op: "Const"
  input: "^gradients/Switch_55"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_58"
  op: "Fill"
  input: "gradients/Shape_58"
  input: "gradients/zeros_58/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_58"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_109"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_110"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_111"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_112"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_56"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_59"
  op: "Shape"
  input: "gradients/Switch_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_59/Const"
  op: "Const"
  input: "^gradients/Switch_56"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_59"
  op: "Fill"
  input: "gradients/Shape_59"
  input: "gradients/zeros_59/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_59"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_57"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_60"
  op: "Shape"
  input: "gradients/Switch_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_60/Const"
  op: "Const"
  input: "^gradients/Switch_57"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_60"
  op: "Fill"
  input: "gradients/Shape_60"
  input: "gradients/zeros_60/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_60"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_32"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_33"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/read"
  input: "gradients/AddN_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_113"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_114"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_115"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_116"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_58"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_61"
  op: "Shape"
  input: "gradients/Switch_58:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_61/Const"
  op: "Const"
  input: "^gradients/Switch_58"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_61"
  op: "Fill"
  input: "gradients/Shape_61"
  input: "gradients/zeros_61/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_61"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_59"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_62"
  op: "Shape"
  input: "gradients/Switch_59:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_62/Const"
  op: "Const"
  input: "^gradients/Switch_59"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_62"
  op: "Fill"
  input: "gradients/Shape_62"
  input: "gradients/zeros_62/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_62"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_117"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_118"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_119"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_120"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_60"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_63"
  op: "Shape"
  input: "gradients/Switch_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_63/Const"
  op: "Const"
  input: "^gradients/Switch_60"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_63"
  op: "Fill"
  input: "gradients/Shape_63"
  input: "gradients/zeros_63/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_63"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_61"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_64"
  op: "Shape"
  input: "gradients/Switch_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_64/Const"
  op: "Const"
  input: "^gradients/Switch_61"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_64"
  op: "Fill"
  input: "gradients/Shape_64"
  input: "gradients/zeros_64/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_64"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_34"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/avgpool_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\200\000\000\000\000\001\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/avgpool_grad/AvgPoolGrad"
  op: "AvgPoolGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/avgpool_grad/Shape"
  input: "gradients/AddN_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_35"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_121"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_122"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_123"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_124"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_62"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_65"
  op: "Shape"
  input: "gradients/Switch_62:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_65/Const"
  op: "Const"
  input: "^gradients/Switch_62"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_65"
  op: "Fill"
  input: "gradients/Shape_65"
  input: "gradients/zeros_65/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_65"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_63"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_66"
  op: "Shape"
  input: "gradients/Switch_63:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_66/Const"
  op: "Const"
  input: "^gradients/Switch_63"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_66"
  op: "Fill"
  input: "gradients/Shape_66"
  input: "gradients/zeros_66/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_66"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_125"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_126"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_127"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_128"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_64"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_67"
  op: "Shape"
  input: "gradients/Switch_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_67/Const"
  op: "Const"
  input: "^gradients/Switch_64"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_67"
  op: "Fill"
  input: "gradients/Shape_67"
  input: "gradients/zeros_67/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_67"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_65"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_68"
  op: "Shape"
  input: "gradients/Switch_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_68/Const"
  op: "Const"
  input: "^gradients/Switch_65"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_68"
  op: "Fill"
  input: "gradients/Shape_68"
  input: "gradients/zeros_68/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_68"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_36"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\200\000\000\000\000\001\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\200\000\000\000\000\001\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_36"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_36"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_37"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_129"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_130"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_131"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_132"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_66"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_69"
  op: "Shape"
  input: "gradients/Switch_66:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_69/Const"
  op: "Const"
  input: "^gradients/Switch_66"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_69"
  op: "Fill"
  input: "gradients/Shape_69"
  input: "gradients/zeros_69/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_69"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_67"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_70"
  op: "Shape"
  input: "gradients/Switch_67:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_70/Const"
  op: "Const"
  input: "^gradients/Switch_67"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_70"
  op: "Fill"
  input: "gradients/Shape_70"
  input: "gradients/zeros_70/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_70"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_133"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_134"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_135"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_136"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_68"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_71"
  op: "Shape"
  input: "gradients/Switch_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_71/Const"
  op: "Const"
  input: "^gradients/Switch_68"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_71"
  op: "Fill"
  input: "gradients/Shape_71"
  input: "gradients/zeros_71/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_71"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_69"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_72"
  op: "Shape"
  input: "gradients/Switch_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_72/Const"
  op: "Const"
  input: "^gradients/Switch_69"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_72"
  op: "Fill"
  input: "gradients/Shape_72"
  input: "gradients/zeros_72/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_72"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_38"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_39"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/read"
  input: "gradients/AddN_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_137"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_138"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_139"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_140"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_70"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_73"
  op: "Shape"
  input: "gradients/Switch_70:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_73/Const"
  op: "Const"
  input: "^gradients/Switch_70"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_73"
  op: "Fill"
  input: "gradients/Shape_73"
  input: "gradients/zeros_73/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_73"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_71"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_74"
  op: "Shape"
  input: "gradients/Switch_71:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_74/Const"
  op: "Const"
  input: "^gradients/Switch_71"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_74"
  op: "Fill"
  input: "gradients/Shape_74"
  input: "gradients/zeros_74/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_74"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_141"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_142"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_143"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_144"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_72"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_75"
  op: "Shape"
  input: "gradients/Switch_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_75/Const"
  op: "Const"
  input: "^gradients/Switch_72"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_75"
  op: "Fill"
  input: "gradients/Shape_75"
  input: "gradients/zeros_75/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_75"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_73"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_76"
  op: "Shape"
  input: "gradients/Switch_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_76/Const"
  op: "Const"
  input: "^gradients/Switch_73"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_76"
  op: "Fill"
  input: "gradients/Shape_76"
  input: "gradients/zeros_76/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_76"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_40"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\200\000\000\000\000\001\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\200\000\000\000\000\001\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_40"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_40"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_41"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_145"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_146"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_147"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_148"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_74"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_77"
  op: "Shape"
  input: "gradients/Switch_74:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_77/Const"
  op: "Const"
  input: "^gradients/Switch_74"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_77"
  op: "Fill"
  input: "gradients/Shape_77"
  input: "gradients/zeros_77/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_77"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_75"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_78"
  op: "Shape"
  input: "gradients/Switch_75:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_78/Const"
  op: "Const"
  input: "^gradients/Switch_75"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_78"
  op: "Fill"
  input: "gradients/Shape_78"
  input: "gradients/zeros_78/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_78"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_149"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_150"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_151"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_152"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_76"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_79"
  op: "Shape"
  input: "gradients/Switch_76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_79/Const"
  op: "Const"
  input: "^gradients/Switch_76"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_79"
  op: "Fill"
  input: "gradients/Shape_79"
  input: "gradients/zeros_79/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_79"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_77"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_80"
  op: "Shape"
  input: "gradients/Switch_77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_80/Const"
  op: "Const"
  input: "^gradients/Switch_77"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_80"
  op: "Fill"
  input: "gradients/Shape_80"
  input: "gradients/zeros_80/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_80"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_42"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_43"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/read"
  input: "gradients/AddN_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_153"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_154"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_155"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_156"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_78"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_81"
  op: "Shape"
  input: "gradients/Switch_78:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_81/Const"
  op: "Const"
  input: "^gradients/Switch_78"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_81"
  op: "Fill"
  input: "gradients/Shape_81"
  input: "gradients/zeros_81/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_81"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_79"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_82"
  op: "Shape"
  input: "gradients/Switch_79:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_82/Const"
  op: "Const"
  input: "^gradients/Switch_79"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_82"
  op: "Fill"
  input: "gradients/Shape_82"
  input: "gradients/zeros_82/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_82"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_157"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_158"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_159"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_160"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_80"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/avgpool"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_83"
  op: "Shape"
  input: "gradients/Switch_80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_83/Const"
  op: "Const"
  input: "^gradients/Switch_80"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_83"
  op: "Fill"
  input: "gradients/Shape_83"
  input: "gradients/zeros_83/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_83"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_81"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_84"
  op: "Shape"
  input: "gradients/Switch_81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_84/Const"
  op: "Const"
  input: "^gradients/Switch_81"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_84"
  op: "Fill"
  input: "gradients/Shape_84"
  input: "gradients/zeros_84/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_84"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_44"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/avgpool_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/avgpool_grad/AvgPoolGrad"
  op: "AvgPoolGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/avgpool_grad/Shape"
  input: "gradients/AddN_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/AddN_45"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/avgpool_grad/AvgPoolGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_161"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_162"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_163"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_164"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_82"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_85"
  op: "Shape"
  input: "gradients/Switch_82:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_85/Const"
  op: "Const"
  input: "^gradients/Switch_82"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_85"
  op: "Fill"
  input: "gradients/Shape_85"
  input: "gradients/zeros_85/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_85"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_83"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_86"
  op: "Shape"
  input: "gradients/Switch_83:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_86/Const"
  op: "Const"
  input: "^gradients/Switch_83"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_86"
  op: "Fill"
  input: "gradients/Shape_86"
  input: "gradients/zeros_86/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_86"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_165"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_166"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_167"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_168"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_84"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_87"
  op: "Shape"
  input: "gradients/Switch_84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_87/Const"
  op: "Const"
  input: "^gradients/Switch_84"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_87"
  op: "Fill"
  input: "gradients/Shape_87"
  input: "gradients/zeros_87/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_87"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_85"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_88"
  op: "Shape"
  input: "gradients/Switch_85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_88/Const"
  op: "Const"
  input: "^gradients/Switch_85"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_88"
  op: "Fill"
  input: "gradients/Shape_88"
  input: "gradients/zeros_88/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_88"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_46"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\030\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_46"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_46"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_47"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1_1/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_169"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_170"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_171"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_172"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_86"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_89"
  op: "Shape"
  input: "gradients/Switch_86:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_89/Const"
  op: "Const"
  input: "^gradients/Switch_86"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_89"
  op: "Fill"
  input: "gradients/Shape_89"
  input: "gradients/zeros_89/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_89"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_87"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_90"
  op: "Shape"
  input: "gradients/Switch_87:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_90/Const"
  op: "Const"
  input: "^gradients/Switch_87"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_90"
  op: "Fill"
  input: "gradients/Shape_90"
  input: "gradients/zeros_90/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_90"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_173"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_174"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_175"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_176"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_88"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_91"
  op: "Shape"
  input: "gradients/Switch_88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_91/Const"
  op: "Const"
  input: "^gradients/Switch_88"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_91"
  op: "Fill"
  input: "gradients/Shape_91"
  input: "gradients/zeros_91/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_91"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_89"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_92"
  op: "Shape"
  input: "gradients/Switch_89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_92/Const"
  op: "Const"
  input: "^gradients/Switch_89"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_92"
  op: "Fill"
  input: "gradients/Shape_92"
  input: "gradients/zeros_92/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_92"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_48"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_49"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/read"
  input: "gradients/AddN_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_177"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_178"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_179"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_180"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_90"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_93"
  op: "Shape"
  input: "gradients/Switch_90:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_93/Const"
  op: "Const"
  input: "^gradients/Switch_90"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_93"
  op: "Fill"
  input: "gradients/Shape_93"
  input: "gradients/zeros_93/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_93"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_91"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_94"
  op: "Shape"
  input: "gradients/Switch_91:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_94/Const"
  op: "Const"
  input: "^gradients/Switch_91"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_94"
  op: "Fill"
  input: "gradients/Shape_94"
  input: "gradients/zeros_94/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_94"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_181"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_182"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_183"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_184"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_92"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_95"
  op: "Shape"
  input: "gradients/Switch_92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_95/Const"
  op: "Const"
  input: "^gradients/Switch_92"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_95"
  op: "Fill"
  input: "gradients/Shape_95"
  input: "gradients/zeros_95/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_95"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_93"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_96"
  op: "Shape"
  input: "gradients/Switch_93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_96/Const"
  op: "Const"
  input: "^gradients/Switch_93"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_96"
  op: "Fill"
  input: "gradients/Shape_96"
  input: "gradients/zeros_96/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_96"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_50"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/mod"
  op: "FloorMod"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate/axis"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\000\001\000\000\000\002\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/mod"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice"
  op: "Slice"
  input: "gradients/AddN_50"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/ConcatOffset"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice_1"
  op: "Slice"
  input: "gradients/AddN_50"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/ConcatOffset:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice_1"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice_1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_51"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/read"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/ShapeN:1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_2_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_185"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_186"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_187"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_188"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_94"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_97"
  op: "Shape"
  input: "gradients/Switch_94:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_97/Const"
  op: "Const"
  input: "^gradients/Switch_94"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_97"
  op: "Fill"
  input: "gradients/Shape_97"
  input: "gradients/zeros_97/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_97"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_95"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_98"
  op: "Shape"
  input: "gradients/Switch_95:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_98/Const"
  op: "Const"
  input: "^gradients/Switch_95"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_98"
  op: "Fill"
  input: "gradients/Shape_98"
  input: "gradients/zeros_98/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_98"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_189"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_190"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_191"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_192"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_96"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/conv_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_99"
  op: "Shape"
  input: "gradients/Switch_96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_99/Const"
  op: "Const"
  input: "^gradients/Switch_96"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_99"
  op: "Fill"
  input: "gradients/Shape_99"
  input: "gradients/zeros_99/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_99"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_97"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_100"
  op: "Shape"
  input: "gradients/Switch_97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_100/Const"
  op: "Const"
  input: "^gradients/Switch_97"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_100"
  op: "Fill"
  input: "gradients/Shape_100"
  input: "gradients/zeros_100/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_100"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_52"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/AddN_53"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond_1/bn_2_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/read"
  input: "gradients/AddN_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  op: "Switch"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1_grad/ReluGrad"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/cond_grad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/cond_grad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/cond_grad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/relu_1_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "gradients/zeros_like_193"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_194"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_195"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_196"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_2"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_98"
  op: "Switch"
  input: "lanenet_loss/inference/encode/conv1/conv1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_101"
  op: "Shape"
  input: "gradients/Switch_98:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_101/Const"
  op: "Const"
  input: "^gradients/Switch_98"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_101"
  op: "Fill"
  input: "gradients/Shape_101"
  input: "gradients/zeros_101/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency"
  input: "gradients/zeros_101"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_99"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_102"
  op: "Shape"
  input: "gradients/Switch_99:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_102/Const"
  op: "Const"
  input: "^gradients/Switch_99"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_102"
  op: "Fill"
  input: "gradients/Shape_102"
  input: "gradients/zeros_102/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "gradients/zeros_102"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_197"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_198"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_199"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_200"
  op: "ZerosLike"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/Merge_grad/tuple/control_dependency_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch:1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/Const"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:3"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 0.0010000000474974513
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
}
node {
  name: "gradients/Switch_100"
  op: "Switch"
  input: "lanenet_loss/inference/encode/conv1/conv1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_103"
  op: "Shape"
  input: "gradients/Switch_100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_103/Const"
  op: "Const"
  input: "^gradients/Switch_100"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_103"
  op: "Fill"
  input: "gradients/Shape_103"
  input: "gradients/zeros_103/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_103"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Switch_101"
  op: "Switch"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/read"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape_104"
  op: "Shape"
  input: "gradients/Switch_101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/zeros_104/Const"
  op: "Const"
  input: "^gradients/Switch_101"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_104"
  op: "Fill"
  input: "gradients/Shape_104"
  input: "gradients/zeros_104/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  op: "Merge"
  input: "gradients/zeros_104"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_54"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/tuple/control_dependency_1"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/concatenate_grad/Slice_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_55"
  op: "AddN"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1/FusedBatchNorm/Switch_1_grad/cond_grad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/cond/bn_1_1/FusedBatchNorm/Switch_1_grad/cond_grad"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "input_tensor"
  input: "lanenet_loss/inference/encode/conv1/W/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/ShapeN"
  input: "lanenet_loss/inference/encode/conv1/W/read"
  input: "gradients/AddN_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "input_tensor"
  input: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/ShapeN:1"
  input: "gradients/AddN_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W/Adam"
  input: "lanenet_loss/inference/encode/conv1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/conv1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/conv1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 16
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 24
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 24
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 24
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 24
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 3
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
          dim {
            size: 16
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_origin/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W/Adam"
  input: "lanenet_loss/inference/decode/score_1/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_1/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_1/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W/Adam"
  input: "lanenet_loss/inference/decode/score_2/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_2/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_2/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\020\000\000\000\020\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 16
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W/Adam"
  input: "lanenet_loss/inference/decode/score_final/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_final/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 2
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 2
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/inference/decode/score_final/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam/Assign"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W/Adam"
  input: "lanenet_loss/pix_embedding_conv/W/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam/read"
  op: "Identity"
  input: "lanenet_loss/pix_embedding_conv/W/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 64
          }
          dim {
            size: 3
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
        dim {
          size: 64
        }
        dim {
          size: 3
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam_1/Assign"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lanenet_loss/pix_embedding_conv/W/Adam_1/read"
  op: "Identity"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/conv1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/conv1/W"
  input: "lanenet_loss/inference/encode/conv1/W/Adam"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/conv1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/bn/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_1/conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_1_1/conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/bn/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_2/conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_2_1/conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/bn/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_3/conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_3_1/conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/bn/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_4/conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_4_1/conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/bn/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/encode/Dense_Block_5/conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/encode/Dense_Block_5_1/conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/score_origin/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/score_origin/W"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/score_origin/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/deconv_1/deconv_1/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/score_1/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/score_1/W"
  input: "lanenet_loss/inference/decode/score_1/W/Adam"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/score_1/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/deconv_2/deconv_2/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/score_2/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/score_2/W"
  input: "lanenet_loss/inference/decode/score_2/W/Adam"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/score_2/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/deconv_final/deconv_final/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/inference/decode/score_final/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/inference/decode/score_final/W"
  input: "lanenet_loss/inference/decode/score_final/W/Adam"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/inference/decode/score_final/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_lanenet_loss/pix_embedding_conv/W/ApplyAdam"
  op: "ApplyAdam"
  input: "lanenet_loss/pix_embedding_conv/W"
  input: "lanenet_loss/pix_embedding_conv/W/Adam"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "ExponentialDecay"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/lanenet_loss/pix_embedding_conv/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_final/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_origin/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/conv1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/pix_embedding_conv/W/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_final/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_origin/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/conv1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/pix_embedding_conv/W/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_final/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/decode/score_origin/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_1/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_2/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_3/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_4/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/bn/beta/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/Dense_Block_5/conv/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/inference/encode/conv1/W/ApplyAdam"
  input: "^Adam/update_lanenet_loss/pix_embedding_conv/W/ApplyAdam"
}
node {
  name: "Adam/value"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Adam"
  op: "AssignAdd"
  input: "Variable"
  input: "Adam/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 230
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_1/W"
        string_val: "lanenet_loss/inference/decode/score_1/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_1/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_2/W"
        string_val: "lanenet_loss/inference/decode/score_2/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_2/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_final/W"
        string_val: "lanenet_loss/inference/decode/score_final/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_final/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_origin/W"
        string_val: "lanenet_loss/inference/decode/score_origin/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/conv1/W"
        string_val: "lanenet_loss/inference/encode/conv1/W/Adam"
        string_val: "lanenet_loss/inference/encode/conv1/W/Adam_1"
        string_val: "lanenet_loss/pix_embedding_conv/W"
        string_val: "lanenet_loss/pix_embedding_conv/W/Adam"
        string_val: "lanenet_loss/pix_embedding_conv/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 230
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "Variable"
  input: "beta1_power"
  input: "beta2_power"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  input: "lanenet_loss/inference/decode/score_1/W"
  input: "lanenet_loss/inference/decode/score_1/W/Adam"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_2/W"
  input: "lanenet_loss/inference/decode/score_2/W/Adam"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_final/W"
  input: "lanenet_loss/inference/decode/score_final/W/Adam"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  input: "lanenet_loss/inference/decode/score_origin/W"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  input: "lanenet_loss/inference/encode/conv1/W"
  input: "lanenet_loss/inference/encode/conv1/W/Adam"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  input: "lanenet_loss/pix_embedding_conv/W"
  input: "lanenet_loss/pix_embedding_conv/W/Adam"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 230
          }
        }
        string_val: "Variable"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
        string_val: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_1/W"
        string_val: "lanenet_loss/inference/decode/score_1/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_1/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_2/W"
        string_val: "lanenet_loss/inference/decode/score_2/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_2/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_final/W"
        string_val: "lanenet_loss/inference/decode/score_final/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_final/W/Adam_1"
        string_val: "lanenet_loss/inference/decode/score_origin/W"
        string_val: "lanenet_loss/inference/decode/score_origin/W/Adam"
        string_val: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
        string_val: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
        string_val: "lanenet_loss/inference/encode/conv1/W"
        string_val: "lanenet_loss/inference/encode/conv1/W/Adam"
        string_val: "lanenet_loss/inference/encode/conv1/W/Adam_1"
        string_val: "lanenet_loss/pix_embedding_conv/W"
        string_val: "lanenet_loss/pix_embedding_conv/W/Adam"
        string_val: "lanenet_loss/pix_embedding_conv/W/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 230
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "Variable"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "beta1_power"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "beta2_power"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_1/deconv_1/kernel/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_1/deconv_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_2/deconv_2/kernel/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_2/deconv_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "lanenet_loss/inference/decode/deconv_final/deconv_final/kernel/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/deconv_final/deconv_final/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W/Adam"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_1/W/Adam_1"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W/Adam"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_2/W/Adam_1"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W/Adam"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_final/W/Adam_1"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_final/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "lanenet_loss/inference/decode/score_origin/W/Adam_1"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/decode/score_origin/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/Dense_Block_1_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/beta/Adam_1"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_1/conv/W/Adam_1"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_1/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_94"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_95"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/Dense_Block_2_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_96"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_97"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_98"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/beta/Adam_1"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_99"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_100"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_101"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_102"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_103"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_2/conv/W/Adam_1"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_2/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_104"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_105"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_106"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_107"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_108"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_109"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_110"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_111"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_112"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_113"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_114"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_115"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_116"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_117"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_118"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_119"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_120"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_121"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_122"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_123"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_124"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_125"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_126"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_127"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_128"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_129"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_130"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_131"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_132"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_133"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_134"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_135"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/Dense_Block_3_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_136"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_137"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_138"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/beta/Adam_1"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_139"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_140"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_141"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_142"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_143"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_3/conv/W/Adam_1"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_3/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_144"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_145"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_146"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_147"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_148"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_149"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
  input: "save/RestoreV2:149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_150"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_151"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_152"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_153"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_154"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
  input: "save/RestoreV2:154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_155"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_156"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_157"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
  input: "save/RestoreV2:157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_158"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_159"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_160"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
  input: "save/RestoreV2:160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_161"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_162"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_163"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_164"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_165"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
  input: "save/RestoreV2:165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_166"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_167"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_168"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_169"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_170"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
  input: "save/RestoreV2:170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_171"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_172"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_173"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
  input: "save/RestoreV2:173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_174"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_175"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/Dense_Block_4_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_176"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
  input: "save/RestoreV2:176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_177"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam"
  input: "save/RestoreV2:177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_178"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/beta/Adam_1"
  input: "save/RestoreV2:178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_179"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
  input: "save/RestoreV2:179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_180"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
  input: "save/RestoreV2:180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_181"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W"
  input: "save/RestoreV2:181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_182"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam"
  input: "save/RestoreV2:182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_183"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_4/conv/W/Adam_1"
  input: "save/RestoreV2:183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_4/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_184"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
  input: "save/RestoreV2:184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_185"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_186"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_187"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_188"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_189"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
  input: "save/RestoreV2:189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_190"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_191"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_192"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_193"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_194"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
  input: "save/RestoreV2:194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_195"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_196"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_197"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
  input: "save/RestoreV2:197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_198"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_199"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_1/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_200"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
  input: "save/RestoreV2:200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_201"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam"
  input: "save/RestoreV2:201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_202"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta/Adam_1"
  input: "save/RestoreV2:202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_203"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
  input: "save/RestoreV2:203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_204"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
  input: "save/RestoreV2:204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_205"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
  input: "save/RestoreV2:205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_206"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam"
  input: "save/RestoreV2:206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_207"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta/Adam_1"
  input: "save/RestoreV2:207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_208"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
  input: "save/RestoreV2:208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_209"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
  input: "save/RestoreV2:209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/bn_2/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_210"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
  input: "save/RestoreV2:210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_211"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam"
  input: "save/RestoreV2:211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_212"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W/Adam_1"
  input: "save/RestoreV2:212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_213"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
  input: "save/RestoreV2:213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_214"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam"
  input: "save/RestoreV2:214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_215"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W/Adam_1"
  input: "save/RestoreV2:215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/Dense_Block_5_layer_2/composite_conv/conv_2/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_216"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
  input: "save/RestoreV2:216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_217"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam"
  input: "save/RestoreV2:217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_218"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/beta/Adam_1"
  input: "save/RestoreV2:218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_219"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
  input: "save/RestoreV2:219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_220"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
  input: "save/RestoreV2:220"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/bn/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_221"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W"
  input: "save/RestoreV2:221"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_222"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam"
  input: "save/RestoreV2:222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_223"
  op: "Assign"
  input: "lanenet_loss/inference/encode/Dense_Block_5/conv/W/Adam_1"
  input: "save/RestoreV2:223"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/Dense_Block_5/conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_224"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W"
  input: "save/RestoreV2:224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_225"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W/Adam"
  input: "save/RestoreV2:225"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_226"
  op: "Assign"
  input: "lanenet_loss/inference/encode/conv1/W/Adam_1"
  input: "save/RestoreV2:226"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/inference/encode/conv1/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_227"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W"
  input: "save/RestoreV2:227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_228"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W/Adam"
  input: "save/RestoreV2:228"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_229"
  op: "Assign"
  input: "lanenet_loss/pix_embedding_conv/W/Adam_1"
  input: "save/RestoreV2:229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lanenet_loss/pix_embedding_conv/W"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_100"
  input: "^save/Assign_101"
  input: "^save/Assign_102"
  input: "^save/Assign_103"
  input: "^save/Assign_104"
  input: "^save/Assign_105"
  input: "^save/Assign_106"
  input: "^save/Assign_107"
  input: "^save/Assign_108"
  input: "^save/Assign_109"
  input: "^save/Assign_11"
  input: "^save/Assign_110"
  input: "^save/Assign_111"
  input: "^save/Assign_112"
  input: "^save/Assign_113"
  input: "^save/Assign_114"
  input: "^save/Assign_115"
  input: "^save/Assign_116"
  input: "^save/Assign_117"
  input: "^save/Assign_118"
  input: "^save/Assign_119"
  input: "^save/Assign_12"
  input: "^save/Assign_120"
  input: "^save/Assign_121"
  input: "^save/Assign_122"
  input: "^save/Assign_123"
  input: "^save/Assign_124"
  input: "^save/Assign_125"
  input: "^save/Assign_126"
  input: "^save/Assign_127"
  input: "^save/Assign_128"
  input: "^save/Assign_129"
  input: "^save/Assign_13"
  input: "^save/Assign_130"
  input: "^save/Assign_131"
  input: "^save/Assign_132"
  input: "^save/Assign_133"
  input: "^save/Assign_134"
  input: "^save/Assign_135"
  input: "^save/Assign_136"
  input: "^save/Assign_137"
  input: "^save/Assign_138"
  input: "^save/Assign_139"
  input: "^save/Assign_14"
  input: "^save/Assign_140"
  input: "^save/Assign_141"
  input: "^save/Assign_142"
  input: "^save/Assign_143"
  input: "^save/Assign_144"
  input: "^save/Assign_145"
  input: "^save/Assign_146"
  input: "^save/Assign_147"
  input: "^save/Assign_148"
  input: "^save/Assign_149"
  input: "^save/Assign_15"
  input: "^save/Assign_150"
  input: "^save/Assign_151"
  input: "^save/Assign_152"
  input: "^save/Assign_153"
  input: "^save/Assign_154"
  input: "^save/Assign_155"
  input: "^save/Assign_156"
  input: "^save/Assign_157"
  input: "^save/Assign_158"
  input: "^save/Assign_159"
  input: "^save/Assign_16"
  input: "^save/Assign_160"
  input: "^save/Assign_161"
  input: "^save/Assign_162"
  input: "^save/Assign_163"
  input: "^save/Assign_164"
  input: "^save/Assign_165"
  input: "^save/Assign_166"
  input: "^save/Assign_167"
  input: "^save/Assign_168"
  input: "^save/Assign_169"
  input: "^save/Assign_17"
  input: "^save/Assign_170"
  input: "^save/Assign_171"
  input: "^save/Assign_172"
  input: "^save/Assign_173"
  input: "^save/Assign_174"
  input: "^save/Assign_175"
  input: "^save/Assign_176"
  input: "^save/Assign_177"
  input: "^save/Assign_178"
  input: "^save/Assign_179"
  input: "^save/Assign_18"
  input: "^save/Assign_180"
  input: "^save/Assign_181"
  input: "^save/Assign_182"
  input: "^save/Assign_183"
  input: "^save/Assign_184"
  input: "^save/Assign_185"
  input: "^save/Assign_186"
  input: "^save/Assign_187"
  input: "^save/Assign_188"
  input: "^save/Assign_189"
  input: "^save/Assign_19"
  input: "^save/Assign_190"
  input: "^save/Assign_191"
  input: "^save/Assign_192"
  input: "^save/Assign_193"
  input: "^save/Assign_194"
  input: "^save/Assign_195"
  input: "^save/Assign_196"
  input: "^save/Assign_197"
  input: "^save/Assign_198"
  input: "^save/Assign_199"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_200"
  input: "^save/Assign_201"
  input: "^save/Assign_202"
  input: "^save/Assign_203"
  input: "^save/Assign_204"
  input: "^save/Assign_205"
  input: "^save/Assign_206"
  input: "^save/Assign_207"
  input: "^save/Assign_208"
  input: "^save/Assign_209"
  input: "^save/Assign_21"
  input: "^save/Assign_210"
  input: "^save/Assign_211"
  input: "^save/Assign_212"
  input: "^save/Assign_213"
  input: "^save/Assign_214"
  input: "^save/Assign_215"
  input: "^save/Assign_216"
  input: "^save/Assign_217"
  input: "^save/Assign_218"
  input: "^save/Assign_219"
  input: "^save/Assign_22"
  input: "^save/Assign_220"
  input: "^save/Assign_221"
  input: "^save/Assign_222"
  input: "^save/Assign_223"
  input: "^save/Assign_224"
  input: "^save/Assign_225"
  input: "^save/Assign_226"
  input: "^save/Assign_227"
  input: "^save/Assign_228"
  input: "^save/Assign_229"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
  input: "^save/Assign_94"
  input: "^save/Assign_95"
  input: "^save/Assign_96"
  input: "^save/Assign_97"
  input: "^save/Assign_98"
  input: "^save/Assign_99"
}
node {
  name: "train_cost/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_cost"
      }
    }
  }
}
node {
  name: "train_cost"
  op: "ScalarSummary"
  input: "train_cost/tags"
  input: "lanenet_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "val_cost/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "val_cost"
      }
    }
  }
}
node {
  name: "val_cost"
  op: "ScalarSummary"
  input: "val_cost/tags"
  input: "lanenet_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_accuracy/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_accuracy"
      }
    }
  }
}
node {
  name: "train_accuracy"
  op: "ScalarSummary"
  input: "train_accuracy/tags"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "val_accuracy/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "val_accuracy"
      }
    }
  }
}
node {
  name: "val_accuracy"
  op: "ScalarSummary"
  input: "val_accuracy/tags"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
}
node {
  name: "train_binary_seg_loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_binary_seg_loss"
      }
    }
  }
}
node {
  name: "train_binary_seg_loss"
  op: "ScalarSummary"
  input: "train_binary_seg_loss/tags"
  input: "lanenet_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "val_binary_seg_loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "val_binary_seg_loss"
      }
    }
  }
}
node {
  name: "val_binary_seg_loss"
  op: "ScalarSummary"
  input: "val_binary_seg_loss/tags"
  input: "lanenet_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_instance_seg_loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_instance_seg_loss"
      }
    }
  }
}
node {
  name: "train_instance_seg_loss"
  op: "ScalarSummary"
  input: "train_instance_seg_loss/tags"
  input: "lanenet_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "val_instance_seg_loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "val_instance_seg_loss"
      }
    }
  }
}
node {
  name: "val_instance_seg_loss"
  op: "ScalarSummary"
  input: "val_instance_seg_loss/tags"
  input: "lanenet_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "learning_rate/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "learning_rate"
      }
    }
  }
}
node {
  name: "learning_rate"
  op: "ScalarSummary"
  input: "learning_rate/tags"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "train_accuracy"
  input: "train_cost"
  input: "learning_rate"
  input: "train_binary_seg_loss"
  input: "train_instance_seg_loss"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
}
node {
  name: "Merge_1/MergeSummary"
  op: "MergeSummary"
  input: "val_accuracy"
  input: "val_cost"
  input: "val_binary_seg_loss"
  input: "val_instance_seg_loss"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
}
versions {
  producer: 26
}
